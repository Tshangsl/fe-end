OOA面向对象分析/对象/函数对象//如何在js中创建类/属性方法继承
图书馆管理分析

对象属性方法要符合人类自然思维方式
结构也要符合语义化
有助于代码简单化

四种创建对象的方法
new Object
对象直接量{}

Object.create() 

es5开始出现 从ie9开始兼容 完成对象的继承
方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。

__proto__原型(链)：被设计出来的目的就是用来做继承的 模型
原型就是对象

new ClassName()

定义函数时 函数首字母大写 定义类
this.name = name ;
构造函数调用
普通函数调用

类：具有相同的属性和方法的对象的集合

ie11 最后一个版本 微软放弃了自己的ie edge使用webkit内核
在控制台打印浏览器内核
navigator.userAgent

原生的js中没有类 继承
不是完全面向对象的 是基于对象的 
从es6开始才能说是面向对象
有class关键字 extends关键字

js中的方法就是函数 函数就是对象

函数本身也是一个对象

es5 之前 js 定义类
类名大写

属性放到构造函数里 属性才有等号改值的意义
方法放到原型里面 方法不涉及到改的问题 方法只是调用

类的东西被分成两块
属性 构造函数 不要在原型里放属性（原型中涉及屏蔽和修改）
方法 原型 

原型里的就是公共的
构造函数里是私有的

继承分两步进行 继承属性 方法

call

call的作用可以改变函数中的this指针 指向call的第一个参数

改变this指针
call apply
把前面那个函数改成后面第一个参数指向的对象
 改的同时把函数调用
第一个参数都是用来改变方法的 this的
call 可以有很多参数 apply 只有两个参数 第二个参数是数组

bind 改但是不调用

window是全局的 默认可以不写

js中一定是先有对象再有方法 只不过是window下的方法(函数) 不用写window对象

this永远指向当前对象 this 指向正在new的Student对象

var o1 = {name:'lisi'};
        o1 = {name:'lisi',age:22};
不是添加了一个属性 而是创建了一个新对象 把o1的指针指向新对象 原对象失去引用 会被回收
