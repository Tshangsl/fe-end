Vue.js
不仅可以把数据绑定到DOM文本或者attribute还可以绑定到DOM结构
此外Vue也提供一个强大的过滤效果系统 可以在Vue插入/更新/移除元素时自动应用过渡效果

插值

**指令
(参数 动态参数 修饰符)
:带有v-前缀的特殊attribute
指令 attribute 的值预期是单个 JavaScript 表达式 
(v-for 是例外情况，稍后我们再讨论)。
指令的职责:当表达式的值改变时 将其产生的连带影响 响应式地作用于DOM

*参数：一个指令能接受一个参数 在指令名称后以冒号表示
v-bind指令：可用于响应式地更新HTML attribute 缩写:
v-on指令：用于监听DOM事件(此处参数是监听的事件名) 缩写@

*动态参数：从2.6.0开始 可以用方括号括起来的javascript表达式作为一个指令的参数
动态参数预期会求出一个字符串 异常情况下值为null

*修饰符：以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定
.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：

**缩写
Vue 为 v-bind 和 v-on 这两个最常用的指令，提供了特定简写：

v-for指令可以绑定数组的数据来渲染一个项目列表
v-on @ 指令添加一个事件监听者 通过它调用在Vue实例中定义的方法

reverseMessage方法中 我们更新了应用的状态 但没有触碰DOM
所有的DOM操作都由Vue来处理 编写的代码只需要关注逻辑层面即可

v-model指令 实现（表单输入）和（应用状态）之间的双向绑定

组件系统是Vue的另一个重要概念 因为它是一种抽象 允许我们使用小型
独立和通常可复用的组件构建大型应用 几乎任意类型的应用界面都可以
抽象成一个组件树

Vue里 一个组件本质上是一个拥有预定义选项的一个Vue实例
Vue中注册组件很简单

Vue.componet('todo-item'{
	//“prop”类似于一个自定义attribute
	props:['todo'],
	template:'<li>sss</li>'
})
<todo-item></todo-item>
模板语法-插值
Vue.js使用了基于HTML的模板语法
 允许开发者声明式地将DOM绑定至底层Vue实现
所有Vue.js的模板都是合法的HTML
所以能被遵循规范的浏览器和HTML解析器解析

在底层的实现上 Vue将模板编译成虚拟DOM渲染函数
结合响应系统 Vue能够只能地计算出最少先不要重新渲染多少组件
并把DOM操作次数减到最少

如果你熟悉虚拟DOM并且偏爱javascript的原始力量
你也可以不用模板 直接写渲染(render)函数 使用可选的JSX语法

插值：
文本
数据绑定最常见的形式就是使用Mustache语法（双大括号）的文本插值